#House Robber
#Tabulation Solution
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        if n == 1:
            return nums[0]
        dp = [0] * (n + 1)
        dp[0] = 0
        dp[1] = nums[0]
        for i in range(2, n + 1):
            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1])
        return dp[n]
          
#Tabulation(Optimized) 
class Solution:
    def rob(self, nums):
        if not nums:
            return 0
        if len(nums) == 1:
            return nums[0]

        a, b = 0, 0 

        for num in nums:
            c = max(b, a + num) 
            a = b  
            b = c  

        return b  # The result is stored in b

#Memoization
class Solution:
    def rob(self, nums):
        n = len(nums)
        dp = [-1] * n  # Memoization table

        def rob_from(i):
            if i >= n:
                return 0
            if dp[i] != -1:
                return dp[i]

            dp[i] = max(rob_from(i + 1), nums[i] + rob_from(i + 2))
            return dp[i]

        return rob_from(0)


                  
