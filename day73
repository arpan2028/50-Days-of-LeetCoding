#Find Median from data stream

import heapq

class MedianFinder:

    def __init__(self):
        # maxHeap for the smaller half (simulate using negatives)
        # minHeap for the larger half
        self.maxHeap = []  # Max heap (lower half, use -num)
        self.minHeap = []  # Min heap (upper half)

    def addNum(self, num: int) -> None:
        # Step 1: Add to maxHeap (as -num to simulate max-heap)
        heapq.heappush(self.maxHeap, -num)

        # Step 2: Move the largest value from maxHeap to minHeap
        heapq.heappush(self.minHeap, -heapq.heappop(self.maxHeap))

        # Step 3: Balance if minHeap has more elements than maxHeap
        if len(self.minHeap) > len(self.maxHeap):
            heapq.heappush(self.maxHeap, -heapq.heappop(self.minHeap))

    def findMedian(self) -> float:
        # If odd number of elements, median is top of maxHeap
        if len(self.maxHeap) > len(self.minHeap):
            return -self.maxHeap[0]
        # If even, median is average of tops of both heaps
        return (-self.maxHeap[0] + self.minHeap[0]) / 2.0
