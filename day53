#Palindromic Substrings
#Expand around center method
class Solution:
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        res = []  
        count = 0      
        for i in range(len(s)):
            l,r = i, i
            while l >= 0 and r < len(s) and s[l] == s[r]:
                count += 1
                l -= 1
                r += 1

            l,r = i, i + 1
            while l >= 0 and r < len(s) and s[l] == s[r]:
                count += 1
                l -= 1
                r += 1
        return count

        #UMPIRE
        #Understand - Understood
        #Edge cases - each letter
        #Match - this is string problem, most probably sliding window
        #Plan -  1. Sliding window
        #       2. Expand form center 
        #Implement 
        #Review - I got a TLE, so i had to change from storing string to count only

  There is a working dp solution for this that i might see later on.
