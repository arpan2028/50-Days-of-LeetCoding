Easy solution
class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        result = 0
        for i in range(32):
            digit = n % 2
            n = n // 2
            result = result * 2 + digit
        return result


  Using Bitwise 
class Solution:
    def reverseBits(self, n):
        result = 0
        for _ in range(32):
            bit = n & 1                   # Extract the last bit
            result = (result << 1) | bit # Shift result left and add bit
            n >>= 1                      # Shift n right to process next bit
        return result


String not useful solution
class Solution:
    def reverseBits(self, n):
        bin_str = bin(n)[2:].zfill(32)  # get 32-bit binary string
        reversed_str = bin_str[::-1]    # reverse the string
        return int(reversed_str, 2)     # convert back to int
