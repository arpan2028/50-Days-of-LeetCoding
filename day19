Longest Common Subsequence

#Using tabulation
class Solution:
    def longestCommonSubsequence(self, text1, text2):
        m, n = len(text1), len(text2)
        # Create a DP table with (m+1) rows and (n+1) columns
        dp = [[0] * (n + 1) for _ in range(m + 1)]

        # Fill the table from bottom-right to top-left
        for i in range(m - 1, -1, -1):
            for j in range(n - 1, -1, -1):
                if text1[i] == text2[j]:
                    dp[i][j] = 1 + dp[i + 1][j + 1]
                else:
                    dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])

        return dp[0][0]

#Using memoization
class Solution:
    def longestCommonSubsequence(self, text1, text2):
        memo = {}  # key: (i, j), value: LCS length starting from i and j

        def lcs(i, j):
            # Base case: reached end of either string
            if i == len(text1) or j == len(text2):
                return 0

            if (i, j) in memo:
                return memo[(i, j)]

            if text1[i] == text2[j]:
                memo[(i, j)] = 1 + lcs(i + 1, j + 1)
            else:
                memo[(i, j)] = max(lcs(i + 1, j), lcs(i, j + 1))

            return memo[(i, j)]

        return lcs(0, 0)
