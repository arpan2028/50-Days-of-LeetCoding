DP Tabulation
class Solution(object):
    def wordBreak(self, s, wordDict):
        wordSet = set(wordDict)
        n = len(s)
        dp = [False] * (n + 1)
        dp[0] = True  # Empty string is breakable

        for i in range(1, n + 1):
            for j in range(i):
                if dp[j] and s[j:i] in wordSet:
                    dp[i] = True
                    break

        return dp[n]

DP Memoization
class Solution(object):
    def wordBreak(self, s, wordDict):
        wordSet = set(wordDict)
        memo = {}

        def canBreak(start):
            if start == len(s):
                return True  # Reached the end of the string

            if start in memo:
                return memo[start]

            for end in range(start + 1, len(s) + 1):
                if s[start:end] in wordSet and canBreak(end):
                    memo[start] = True
                    return True

            memo[start] = False
            return False

        return canBreak(0)

To be contd...

Yet to study this 
class TrieNode:
    def __init__(self):
        self.children = {}
        self.end = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        cur = self.root
        for ch in word:
            if ch not in cur.children:
                cur.children[ch] = TrieNode()
            cur = cur.children[ch]
        cur.end = True

class Solution:
    def wordBreak(self, s, wordDict):
        # Build Trie
        trie = Trie()
        for word in wordDict:
            trie.insert(word)
        
        memo = {}

        def dfs(start):
            if start == len(s):
                return True
            if start in memo:
                return memo[start]
            
            node = trie.root
            for end in range(start, len(s)):
                ch = s[end]
                if ch not in node.children:
                    break
                node = node.children[ch]
                if node.end and dfs(end + 1):
                    memo[start] = True
                    return True

            memo[start] = False
            return False

        return dfs(0)
