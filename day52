#Longest Palindromic Substring

#Naive approach using slidding window(TLE)
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        def helper(s, left, right):
            while left < right:
                if s[left] != s[right]:
                    return False
                left += 1
                right -= 1
            return True

        maxpalin = ""
        n = len(s)
        for left in range(len(s)):
            for right in range(left, len(s)):
                if helper(s, left, right):
                    if (right - left + 1) > len(maxpalin):
                        maxpalin = s[left: right+1]
        return maxpalin

  
#Optimized but uses string slicing
class Solution:
    def longestPalindrome(self, s):
        res = ""
        resLen = 0

        for i in range(len(s)):
            # Odd length palindromes (center at i)
            l, r = i, i
            while l >= 0 and r < len(s) and s[l] == s[r]:
                if (r - l + 1) > resLen:
                    res = s[l:r+1]
                    resLen = r - l + 1
                l -= 1
                r += 1

            # Even length palindromes (center between i and i+1)
            l, r = i, i + 1
            while l >= 0 and r < len(s) and s[l] == s[r]:
                if (r - l + 1) > resLen:
                    res = s[l:r+1]
                    resLen = r - l + 1
                l -= 1
                r += 1

        return res
  
#More Optimized using variables 
class Solution:
    def longestPalindrome(self, s):
        n = len(s)
        res_l, res_r = 0, 0
        resLen = 0

        for i in range(n):
            # Odd length palindrome (center at i)
            l, r = i, i
            while l >= 0 and r < n and s[l] == s[r]:
                if (r - l + 1) > resLen:
                    res_l = l
                    res_r = r + 1  # for slicing
                    resLen = r - l + 1
                l -= 1
                r += 1

            # Even length palindrome (center between i and i+1)
            l, r = i, i + 1
            while l >= 0 and r < n and s[l] == s[r]:
                if (r - l + 1) > resLen:
                    res_l = l
                    res_r = r + 1  # for slicing
                    resLen = r - l + 1
                l -= 1
                r += 1

        return s[res_l:res_r]
