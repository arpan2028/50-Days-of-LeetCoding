#Binary tree maximum path sum
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def maxPathSum(self, root):
        """
        :type root: Optional[TreeNode]
        :rtype: int
        """
        self.maxSum = float('-inf')

        def dfs(node):
            if not node:
                return 0
            left = max(dfs(node.left), 0)
            right = max(dfs(node.right), 0)

            self.maxSum = max(self.maxSum, left + node.val + right)
    
            return node.val + max(left, right)

        dfs(root)
        return self.maxSum               

        #UMPIRE
        #Understand the problem, nodes apppear once, path doesn't need to pass throught root, node value can be negative too.

        #Matching the problem is a tree problem probably similar to path sum I, II

        #Planning:
        #I need to recall yesterday's approach of returning path

        #Implementation:
        #I am so used to with coding now my planning and implementation phase are literally same
        #Let's freaking implement yesterday's code first

        #Review - It took me 2 hours 21 minutes still after taking too many hints.
        #Evaluate -
        #Time Complexity - O(N), cool
        #Space Complexity - O(1), Do we have a freaking O(1) SC solution here this is really cool.
        
