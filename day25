#Unique paths
#Memoization
class Solution(object):
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        memo = {}
        def dp(i, j):
            if i == m - 1 and j == n - 1:
                return 1
            if i >= m or j >= n:
                return 0
            if (i, j) in memo:
                return memo[(i, j)]

            memo[(i,j)] = dp(i + 1, j) + dp(i, j + 1)
            return memo[(i, j)]

        return dp(0, 0)
                  
 #Tabulation(2D)
class Solution(object):
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        dp = [[1]*n for _ in range(m)]
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[m-1][n - 1] 
          
 #Tabulation(1D)
class Solution(object):
    def uniquePaths(self, m, n):
        # Step 1: Initialize a 1D DP array with all 1s (first row)
        dp = [1] * n

        # Step 2: Update DP row by row
        for i in range(1, m):
            for j in range(1, n):
                dp[j] += dp[j - 1]
                # dp[j] = dp[j] (from above) + dp[j - 1] (from left)

        # Step 3: Return the last element (bottom-right)
        return dp[-1]
