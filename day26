#JumpGame

#Greedy Approach(Burning fuel way)
class Solution(object):
    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        farthest = nums[0]
        for i in range(1, len(nums)):
            farthest -= 1
            if farthest < 0:
                return False
            farthest = max(farthest, nums[i])
        return True
            

#Greedy Approach(Classic Maximum way)

class Solution:
    def canJump(self, nums):
        farthest = 0
        for i in range(len(nums)):
            if i > farthest:
                return False
            farthest = max(farthest, i + nums[i])
        return True
          
#DP Approach (might see this later)
#Tabulation
def canJump(nums):
    n = len(nums)
    dp = [False] * n
    dp[0] = True
    for i in range(n):
        if dp[i]:
            for j in range(1, nums[i] + 1):
                if i + j < n:
                    dp[i + j] = True
    return dp[-1]

#Memoization
def canJump(nums):
    n = len(nums)
    memo = {}

    def can_reach(i):
        if i >= n - 1:
            return True
        if i in memo:
            return memo[i]
        max_jump = nums[i]
        for j in range(1, max_jump + 1):
            if can_reach(i + j):
                memo[i] = True
                return True
        memo[i] = False
        return False

    return can_reach(0)
